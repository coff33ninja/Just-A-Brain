[
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "load_vision_data",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "load_sensor_data",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "load_text_data",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "load_image_text_pairs",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "TemporalLobeAI",
        "importPath": "temporal",
        "description": "temporal",
        "isExtraImport": true,
        "detail": "temporal",
        "documentation": {}
    },
    {
        "label": "softmax",
        "importPath": "temporal",
        "description": "temporal",
        "isExtraImport": true,
        "detail": "temporal",
        "documentation": {}
    },
    {
        "label": "TemporalLobeAI",
        "importPath": "temporal",
        "description": "temporal",
        "isExtraImport": true,
        "detail": "temporal",
        "documentation": {}
    },
    {
        "label": "CerebellumAI",
        "importPath": "cerebellum",
        "description": "cerebellum",
        "isExtraImport": true,
        "detail": "cerebellum",
        "documentation": {}
    },
    {
        "label": "CerebellumAI",
        "importPath": "cerebellum",
        "description": "cerebellum",
        "isExtraImport": true,
        "detail": "cerebellum",
        "documentation": {}
    },
    {
        "label": "LimbicSystemAI",
        "importPath": "limbic",
        "description": "limbic",
        "isExtraImport": true,
        "detail": "limbic",
        "documentation": {}
    },
    {
        "label": "softmax",
        "importPath": "limbic",
        "description": "limbic",
        "isExtraImport": true,
        "detail": "limbic",
        "documentation": {}
    },
    {
        "label": "LimbicSystemAI",
        "importPath": "limbic",
        "description": "limbic",
        "isExtraImport": true,
        "detail": "limbic",
        "documentation": {}
    },
    {
        "label": "OccipitalLobeAI",
        "importPath": "occipital",
        "description": "occipital",
        "isExtraImport": true,
        "detail": "occipital",
        "documentation": {}
    },
    {
        "label": "softmax",
        "importPath": "occipital",
        "description": "occipital",
        "isExtraImport": true,
        "detail": "occipital",
        "documentation": {}
    },
    {
        "label": "OccipitalLobeAI",
        "importPath": "occipital",
        "description": "occipital",
        "isExtraImport": true,
        "detail": "occipital",
        "documentation": {}
    },
    {
        "label": "FrontalLobeAI",
        "importPath": "frontal",
        "description": "frontal",
        "isExtraImport": true,
        "detail": "frontal",
        "documentation": {}
    },
    {
        "label": "FrontalLobeAI",
        "importPath": "frontal",
        "description": "frontal",
        "isExtraImport": true,
        "detail": "frontal",
        "documentation": {}
    },
    {
        "label": "ParietalLobeAI",
        "importPath": "parietal",
        "description": "parietal",
        "isExtraImport": true,
        "detail": "parietal",
        "documentation": {}
    },
    {
        "label": "ParietalLobeAI",
        "importPath": "parietal",
        "description": "parietal",
        "isExtraImport": true,
        "detail": "parietal",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "LSTM",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "LSTM",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "GRU",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Tokenizer",
        "importPath": "tensorflow.keras.preprocessing.text",
        "description": "tensorflow.keras.preprocessing.text",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.text",
        "documentation": {}
    },
    {
        "label": "tokenizer_from_json",
        "importPath": "tensorflow.keras.preprocessing.text",
        "description": "tensorflow.keras.preprocessing.text",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.text",
        "documentation": {}
    },
    {
        "label": "Tokenizer",
        "importPath": "tensorflow.keras.preprocessing.text",
        "description": "tensorflow.keras.preprocessing.text",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.text",
        "documentation": {}
    },
    {
        "label": "pad_sequences",
        "importPath": "tensorflow.keras.preprocessing.sequence",
        "description": "tensorflow.keras.preprocessing.sequence",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.sequence",
        "documentation": {}
    },
    {
        "label": "pad_sequences",
        "importPath": "tensorflow.keras.preprocessing.sequence",
        "description": "tensorflow.keras.preprocessing.sequence",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing.sequence",
        "documentation": {}
    },
    {
        "label": "Adam",
        "importPath": "tensorflow.keras.optimizers.legacy",
        "description": "tensorflow.keras.optimizers.legacy",
        "isExtraImport": true,
        "detail": "tensorflow.keras.optimizers.legacy",
        "documentation": {}
    },
    {
        "label": "Adam",
        "importPath": "tensorflow.keras.optimizers.legacy",
        "description": "tensorflow.keras.optimizers.legacy",
        "isExtraImport": true,
        "detail": "tensorflow.keras.optimizers.legacy",
        "documentation": {}
    },
    {
        "label": "# type: ignore\r\n    Adam",
        "importPath": "tensorflow.keras.optimizers.legacy",
        "description": "tensorflow.keras.optimizers.legacy",
        "isExtraImport": true,
        "detail": "tensorflow.keras.optimizers.legacy",
        "documentation": {}
    },
    {
        "label": "Adam",
        "importPath": "tensorflow.keras.optimizers.legacy",
        "description": "tensorflow.keras.optimizers.legacy",
        "isExtraImport": true,
        "detail": "tensorflow.keras.optimizers.legacy",
        "documentation": {}
    },
    {
        "label": "Adam",
        "importPath": "tensorflow.keras.optimizers.legacy",
        "description": "tensorflow.keras.optimizers.legacy",
        "isExtraImport": true,
        "detail": "tensorflow.keras.optimizers.legacy",
        "documentation": {}
    },
    {
        "label": "Adam",
        "importPath": "tensorflow.keras.optimizers.legacy",
        "description": "tensorflow.keras.optimizers.legacy",
        "isExtraImport": true,
        "detail": "tensorflow.keras.optimizers.legacy",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "TestDataLoading",
        "kind": 6,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "class TestDataLoading(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        cls.vision_content = {\"image_paths\": [os.path.join(TEST_IMAGES_SUBDIR, \"img1.png\")]}\n        with open(TEST_VISION_FILE, 'w') as f: json.dump(cls.vision_content, f)\n        cls.sensor_content = [[1.0, 2.0], [3.0, 4.0]]\n        with open(TEST_SENSOR_FILE, 'w') as f: json.dump(cls.sensor_content, f)\n        cls.text_content = [\"hello\", \"world\"]\n        with open(TEST_TEXT_FILE, 'w') as f: json.dump(cls.text_content, f)",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TestTemporalLobeAI",
        "kind": 6,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "class TestTemporalLobeAI(unittest.TestCase):\n    def setUp(self):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        self.ai = TemporalLobeAI(model_path=TEST_TEMPORAL_MODEL_PATH, memory_path=TEST_TEMPORAL_MEMORY_PATH)\n        if os.path.exists(TEST_TEMPORAL_MODEL_PATH): os.remove(TEST_TEMPORAL_MODEL_PATH)\n        if os.path.exists(TEST_TEMPORAL_MEMORY_PATH): os.remove(TEST_TEMPORAL_MEMORY_PATH)\n        self.ai._initialize_default_weights_biases(); self.ai.save_model(); self.ai.save_memory()\n    def tearDown(self):\n        if os.path.exists(TEST_TEMPORAL_MODEL_PATH): os.remove(TEST_TEMPORAL_MODEL_PATH)\n        if os.path.exists(TEST_TEMPORAL_MEMORY_PATH): os.remove(TEST_TEMPORAL_MEMORY_PATH)",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TestLimbicSystemAI",
        "kind": 6,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "class TestLimbicSystemAI(unittest.TestCase):\n    def setUp(self):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        self.ai = LimbicSystemAI(model_path=TEST_LIMBIC_MODEL_PATH)\n        if os.path.exists(TEST_LIMBIC_MODEL_PATH): os.remove(TEST_LIMBIC_MODEL_PATH)\n        self.ai._initialize_default_weights_biases(); self.ai.save_model()\n        self.sample_temporal_output = np.random.rand(self.ai.input_size).tolist()\n        self.sample_true_emotion = 1; self.sample_reward = 1.0\n    def tearDown(self):\n        if os.path.exists(TEST_LIMBIC_MODEL_PATH): os.remove(TEST_LIMBIC_MODEL_PATH)",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TestOccipitalLobeAI",
        "kind": 6,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "class TestOccipitalLobeAI(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        os.makedirs(TEST_IMAGES_SUBDIR, exist_ok=True)\n        cls.img_size=(32,32); cls.black_img_path=os.path.join(TEST_IMAGES_SUBDIR,\"b.png\"); Image.new('L',cls.img_size,0).save(cls.black_img_path)\n    @classmethod\n    def tearDownClass(cls):\n        if os.path.exists(TEST_IMAGES_SUBDIR): shutil.rmtree(TEST_IMAGES_SUBDIR)\n        if os.path.exists(TEST_OCCIPITAL_MODEL_PATH): os.remove(TEST_OCCIPITAL_MODEL_PATH)\n    def setUp(self):",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TestFrontalLobeAI",
        "kind": 6,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "class TestFrontalLobeAI(unittest.TestCase):\n    def setUp(self):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        self.ai = FrontalLobeAI(model_path=TEST_FRONTAL_MODEL_PATH)\n        if os.path.exists(TEST_FRONTAL_MODEL_PATH): os.remove(TEST_FRONTAL_MODEL_PATH)\n        self.ai.weights = np.random.rand(self.ai.input_size, self.ai.output_size) * 0.01\n        self.ai.exploration_rate_epsilon = 1.0\n        self.ai.save_model()\n        self.sample_state = np.random.rand(self.ai.input_size).tolist()\n    def tearDown(self):",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TestCerebellumAI",
        "kind": 6,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "class TestCerebellumAI(unittest.TestCase):\n    def setUp(self):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        self.ai = CerebellumAI(model_path=TEST_CEREBELLUM_MODEL_PATH)\n        if os.path.exists(TEST_CEREBELLUM_MODEL_PATH):\n            os.remove(TEST_CEREBELLUM_MODEL_PATH)\n        self.ai._initialize_default_weights_biases()\n        self.ai.save_model()\n        self.sample_sensor_data = np.random.rand(self.ai.input_size).tolist()\n        self.sample_true_command = (np.random.rand(self.ai.output_size) * 2 - 1).tolist()",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TestParietalLobeAI",
        "kind": 6,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "class TestParietalLobeAI(unittest.TestCase):\n    def setUp(self):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        self.ai = ParietalLobeAI(model_path=TEST_PARIETAL_MODEL_PATH)\n        if os.path.exists(TEST_PARIETAL_MODEL_PATH):\n            os.remove(TEST_PARIETAL_MODEL_PATH)\n        self.ai._initialize_default_weights_biases()\n        self.ai.save_model()\n        self.sample_sensory_data = np.random.rand(self.ai.input_size).tolist() # input_size is 20\n        self.sample_true_coords = np.random.rand(self.ai.output_size).tolist() # output_size is 3",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_DATA_DIR",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_DATA_DIR = \"data_test\"\nTEST_IMAGES_SUBDIR = os.path.join(TEST_DATA_DIR, \"images\") # Subdirectory for test images\n# Define paths for dummy data files within TEST_DATA_DIR\nTEST_VISION_FILE = os.path.join(TEST_DATA_DIR, \"test_vision.json\")\nTEST_SENSOR_FILE = os.path.join(TEST_DATA_DIR, \"test_sensors.json\")\nTEST_TEXT_FILE = os.path.join(TEST_DATA_DIR, \"test_text.json\")\nTEST_PAIRS_FILE = os.path.join(TEST_DATA_DIR, \"test_pairs.json\")\n# Define paths for AI model files within TEST_DATA_DIR\nTEST_TEMPORAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_model.json\")\nTEST_TEMPORAL_MEMORY_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_memory.json\")",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_IMAGES_SUBDIR",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_IMAGES_SUBDIR = os.path.join(TEST_DATA_DIR, \"images\") # Subdirectory for test images\n# Define paths for dummy data files within TEST_DATA_DIR\nTEST_VISION_FILE = os.path.join(TEST_DATA_DIR, \"test_vision.json\")\nTEST_SENSOR_FILE = os.path.join(TEST_DATA_DIR, \"test_sensors.json\")\nTEST_TEXT_FILE = os.path.join(TEST_DATA_DIR, \"test_text.json\")\nTEST_PAIRS_FILE = os.path.join(TEST_DATA_DIR, \"test_pairs.json\")\n# Define paths for AI model files within TEST_DATA_DIR\nTEST_TEMPORAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_model.json\")\nTEST_TEMPORAL_MEMORY_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_memory.json\")\nTEST_CEREBELLUM_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_cerebellum_model.json\")",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_VISION_FILE",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_VISION_FILE = os.path.join(TEST_DATA_DIR, \"test_vision.json\")\nTEST_SENSOR_FILE = os.path.join(TEST_DATA_DIR, \"test_sensors.json\")\nTEST_TEXT_FILE = os.path.join(TEST_DATA_DIR, \"test_text.json\")\nTEST_PAIRS_FILE = os.path.join(TEST_DATA_DIR, \"test_pairs.json\")\n# Define paths for AI model files within TEST_DATA_DIR\nTEST_TEMPORAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_model.json\")\nTEST_TEMPORAL_MEMORY_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_memory.json\")\nTEST_CEREBELLUM_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_cerebellum_model.json\")\nTEST_LIMBIC_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_limbic_model.json\")\nTEST_OCCIPITAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_occipital_model.json\")",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_SENSOR_FILE",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_SENSOR_FILE = os.path.join(TEST_DATA_DIR, \"test_sensors.json\")\nTEST_TEXT_FILE = os.path.join(TEST_DATA_DIR, \"test_text.json\")\nTEST_PAIRS_FILE = os.path.join(TEST_DATA_DIR, \"test_pairs.json\")\n# Define paths for AI model files within TEST_DATA_DIR\nTEST_TEMPORAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_model.json\")\nTEST_TEMPORAL_MEMORY_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_memory.json\")\nTEST_CEREBELLUM_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_cerebellum_model.json\")\nTEST_LIMBIC_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_limbic_model.json\")\nTEST_OCCIPITAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_occipital_model.json\")\nTEST_FRONTAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_frontal_model.json\")",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_TEXT_FILE",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_TEXT_FILE = os.path.join(TEST_DATA_DIR, \"test_text.json\")\nTEST_PAIRS_FILE = os.path.join(TEST_DATA_DIR, \"test_pairs.json\")\n# Define paths for AI model files within TEST_DATA_DIR\nTEST_TEMPORAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_model.json\")\nTEST_TEMPORAL_MEMORY_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_memory.json\")\nTEST_CEREBELLUM_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_cerebellum_model.json\")\nTEST_LIMBIC_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_limbic_model.json\")\nTEST_OCCIPITAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_occipital_model.json\")\nTEST_FRONTAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_frontal_model.json\")\nTEST_PARIETAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_parietal_model.json\") # Added for ParietalLobeAI",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_PAIRS_FILE",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_PAIRS_FILE = os.path.join(TEST_DATA_DIR, \"test_pairs.json\")\n# Define paths for AI model files within TEST_DATA_DIR\nTEST_TEMPORAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_model.json\")\nTEST_TEMPORAL_MEMORY_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_memory.json\")\nTEST_CEREBELLUM_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_cerebellum_model.json\")\nTEST_LIMBIC_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_limbic_model.json\")\nTEST_OCCIPITAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_occipital_model.json\")\nTEST_FRONTAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_frontal_model.json\")\nTEST_PARIETAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_parietal_model.json\") # Added for ParietalLobeAI\nclass TestDataLoading(unittest.TestCase):",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_TEMPORAL_MODEL_PATH",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_TEMPORAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_model.json\")\nTEST_TEMPORAL_MEMORY_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_memory.json\")\nTEST_CEREBELLUM_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_cerebellum_model.json\")\nTEST_LIMBIC_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_limbic_model.json\")\nTEST_OCCIPITAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_occipital_model.json\")\nTEST_FRONTAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_frontal_model.json\")\nTEST_PARIETAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_parietal_model.json\") # Added for ParietalLobeAI\nclass TestDataLoading(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_TEMPORAL_MEMORY_PATH",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_TEMPORAL_MEMORY_PATH = os.path.join(TEST_DATA_DIR, \"test_temporal_memory.json\")\nTEST_CEREBELLUM_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_cerebellum_model.json\")\nTEST_LIMBIC_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_limbic_model.json\")\nTEST_OCCIPITAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_occipital_model.json\")\nTEST_FRONTAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_frontal_model.json\")\nTEST_PARIETAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_parietal_model.json\") # Added for ParietalLobeAI\nclass TestDataLoading(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_CEREBELLUM_MODEL_PATH",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_CEREBELLUM_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_cerebellum_model.json\")\nTEST_LIMBIC_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_limbic_model.json\")\nTEST_OCCIPITAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_occipital_model.json\")\nTEST_FRONTAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_frontal_model.json\")\nTEST_PARIETAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_parietal_model.json\") # Added for ParietalLobeAI\nclass TestDataLoading(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        cls.vision_content = {\"image_paths\": [os.path.join(TEST_IMAGES_SUBDIR, \"img1.png\")]}",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_LIMBIC_MODEL_PATH",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_LIMBIC_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_limbic_model.json\")\nTEST_OCCIPITAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_occipital_model.json\")\nTEST_FRONTAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_frontal_model.json\")\nTEST_PARIETAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_parietal_model.json\") # Added for ParietalLobeAI\nclass TestDataLoading(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        cls.vision_content = {\"image_paths\": [os.path.join(TEST_IMAGES_SUBDIR, \"img1.png\")]}\n        with open(TEST_VISION_FILE, 'w') as f: json.dump(cls.vision_content, f)",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_OCCIPITAL_MODEL_PATH",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_OCCIPITAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_occipital_model.json\")\nTEST_FRONTAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_frontal_model.json\")\nTEST_PARIETAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_parietal_model.json\") # Added for ParietalLobeAI\nclass TestDataLoading(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        cls.vision_content = {\"image_paths\": [os.path.join(TEST_IMAGES_SUBDIR, \"img1.png\")]}\n        with open(TEST_VISION_FILE, 'w') as f: json.dump(cls.vision_content, f)\n        cls.sensor_content = [[1.0, 2.0], [3.0, 4.0]]",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_FRONTAL_MODEL_PATH",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_FRONTAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_frontal_model.json\")\nTEST_PARIETAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_parietal_model.json\") # Added for ParietalLobeAI\nclass TestDataLoading(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        cls.vision_content = {\"image_paths\": [os.path.join(TEST_IMAGES_SUBDIR, \"img1.png\")]}\n        with open(TEST_VISION_FILE, 'w') as f: json.dump(cls.vision_content, f)\n        cls.sensor_content = [[1.0, 2.0], [3.0, 4.0]]\n        with open(TEST_SENSOR_FILE, 'w') as f: json.dump(cls.sensor_content, f)",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TEST_PARIETAL_MODEL_PATH",
        "kind": 5,
        "importPath": "tests.test_ai_modules",
        "description": "tests.test_ai_modules",
        "peekOfCode": "TEST_PARIETAL_MODEL_PATH = os.path.join(TEST_DATA_DIR, \"test_parietal_model.json\") # Added for ParietalLobeAI\nclass TestDataLoading(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        os.makedirs(TEST_DATA_DIR, exist_ok=True)\n        cls.vision_content = {\"image_paths\": [os.path.join(TEST_IMAGES_SUBDIR, \"img1.png\")]}\n        with open(TEST_VISION_FILE, 'w') as f: json.dump(cls.vision_content, f)\n        cls.sensor_content = [[1.0, 2.0], [3.0, 4.0]]\n        with open(TEST_SENSOR_FILE, 'w') as f: json.dump(cls.sensor_content, f)\n        cls.text_content = [\"hello\", \"world\"]",
        "detail": "tests.test_ai_modules",
        "documentation": {}
    },
    {
        "label": "TemporalLobeAI",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class TemporalLobeAI:\n    def __init__(\n        self,\n        model_path=\"data/temporal_model.weights.h5\", # Updated extension\n        memory_path=\"data/temporal_memory.json\", # For cross-modal memory\n        tokenizer_path=\"data/temporal_tokenizer.json\"\n    ):\n        # RNN/LSTM Parameters\n        self.vocab_size = 2000  # Max words in vocabulary\n        self.max_sequence_length = 20  # Max length of text sequences",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "CerebellumAI",
        "kind": 6,
        "importPath": "cerebellum",
        "description": "cerebellum",
        "peekOfCode": "class CerebellumAI:\n    def __init__(\n        self, model_path=\"data/cerebellum_model.weights.h5\"\n    ):  # Updated extension\n        self.input_size = 10  # Sensor feedback\n        self.output_size = 3  # Motor commands (e.g., scaled between -1 and 1)\n        # Learning rate for the Keras optimizer\n        self.learning_rate_learn = 0.001  # Adam default is often 0.001\n        self.model_path = model_path\n        self.memory_path = self.model_path.replace(",
        "detail": "cerebellum",
        "documentation": {}
    },
    {
        "label": "img1",
        "kind": 5,
        "importPath": "default_image",
        "description": "default_image",
        "peekOfCode": "img1 = Image.new(\"RGB\", (50, 50), color=\"red\")\nimg1.save(\"data/images/image1.png\")\n# Create image2.png (blue square)\nimg2 = Image.new(\"RGB\", (50, 50), color=\"blue\")\nimg2.save(\"data/images/image2.png\")\n# Create default_image.png (gray square)\ndefault_img = Image.new(\"RGB\", (32, 32), color=\"gray\")\ndefault_img.save(\"data/images/default_image.png\")\nprint(\"images created successfully in data/images/\")",
        "detail": "default_image",
        "documentation": {}
    },
    {
        "label": "img2",
        "kind": 5,
        "importPath": "default_image",
        "description": "default_image",
        "peekOfCode": "img2 = Image.new(\"RGB\", (50, 50), color=\"blue\")\nimg2.save(\"data/images/image2.png\")\n# Create default_image.png (gray square)\ndefault_img = Image.new(\"RGB\", (32, 32), color=\"gray\")\ndefault_img.save(\"data/images/default_image.png\")\nprint(\"images created successfully in data/images/\")",
        "detail": "default_image",
        "documentation": {}
    },
    {
        "label": "default_img",
        "kind": 5,
        "importPath": "default_image",
        "description": "default_image",
        "peekOfCode": "default_img = Image.new(\"RGB\", (32, 32), color=\"gray\")\ndefault_img.save(\"data/images/default_image.png\")\nprint(\"images created successfully in data/images/\")",
        "detail": "default_image",
        "documentation": {}
    },
    {
        "label": "FrontalLobeAI",
        "kind": 6,
        "importPath": "frontal",
        "description": "frontal",
        "peekOfCode": "class FrontalLobeAI:\n    def __init__(\n        self, input_size=18, output_size=5, model_path=\"data/frontal_model.weights.h5\"\n    ):\n        self.input_size = input_size  # State size\n        self.output_size = output_size  # Action size\n        # DQN Parameters\n        self.learning_rate_dqn = 0.001\n        self.discount_factor_gamma = 0.95\n        self.replay_buffer_size = 10000",
        "detail": "frontal",
        "documentation": {}
    },
    {
        "label": "LimbicSystemAI",
        "kind": 6,
        "importPath": "limbic",
        "description": "limbic",
        "peekOfCode": "class LimbicSystemAI:\n    def __init__(self, model_path=\"data/limbic_model.weights.h5\"):  # Updated extension\n        self.input_size = 10  # Processed output from TemporalLobeAI (size 10)\n        self.output_size = 3  # Emotion labels (e.g., happy, urgent, sad)\n        # Learning rate for the Keras optimizer\n        self.learning_rate_learn = 0.001  # Standard Keras learning rate\n        self.model_path = model_path\n        self.memory_path = self.model_path.replace(\n            \".weights.h5\", \"_memory.json\"\n        )  # Path for memory",
        "detail": "limbic",
        "documentation": {}
    },
    {
        "label": "BrainCoordinator",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class BrainCoordinator:\n    def __init__(self):\n        os.makedirs(DATA_DIR, exist_ok=True)\n        os.makedirs(os.path.join(DATA_DIR, \"images\"), exist_ok=True)\n        self.frontal = FrontalLobeAI()\n        self.parietal = ParietalLobeAI()\n        self.temporal = TemporalLobeAI()\n        self.occipital = OccipitalLobeAI()\n        self.cerebellum = CerebellumAI()\n        self.limbic = LimbicSystemAI()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "load_sensor_data",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def load_sensor_data(filepath=SENSOR_FILE):\n    if not os.path.exists(filepath):\n        print(\n            f\"Warning: Sensor data file not found at {filepath}. Returning empty list.\"\n        )\n        return []\n    try:\n        with open(filepath, \"r\") as f:\n            data = json.load(f)\n        return data",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "load_image_text_pairs",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def load_image_text_pairs(filepath=IMAGE_TEXT_PAIRS_FILE):\n    if not os.path.exists(filepath):\n        print(\n            f\"Error: Image-text pairs file not found at {filepath}. Returning empty list.\"\n        )\n        return []\n    try:\n        with open(filepath, \"r\") as f:\n            pairs = json.load(f)\n        if not isinstance(pairs, list):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    # Introductory Message\n    print(\"Welcome to the Interactive Baby AI Simulation!\\n\")\n    print(\"This simulation allows you to observe and interact with an AI as it learns.\")\n    print(\"You will have options to:\")\n    print(\"- Run the simulation for a specific number of 'days'.\")\n    print(\"- Run it indefinitely, providing input for each 'day'.\")\n    print(\"- For each 'day', you can let the AI process pre-scheduled data, or you can\")\n    print(\"  provide new data (images, text, feedback) to guide its learning.\\n\")\n    print(",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DATA_DIR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DATA_DIR = \"data\"\nSENSOR_FILE = os.path.join(DATA_DIR, \"sensors.json\")\nIMAGE_TEXT_PAIRS_FILE = os.path.join(DATA_DIR, \"image_text_pairs.json\")\nDEFAULT_IMAGE_PATH = \"data/images/default_image.png\"\ndef load_sensor_data(filepath=SENSOR_FILE):\n    if not os.path.exists(filepath):\n        print(\n            f\"Warning: Sensor data file not found at {filepath}. Returning empty list.\"\n        )\n        return []",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "SENSOR_FILE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "SENSOR_FILE = os.path.join(DATA_DIR, \"sensors.json\")\nIMAGE_TEXT_PAIRS_FILE = os.path.join(DATA_DIR, \"image_text_pairs.json\")\nDEFAULT_IMAGE_PATH = \"data/images/default_image.png\"\ndef load_sensor_data(filepath=SENSOR_FILE):\n    if not os.path.exists(filepath):\n        print(\n            f\"Warning: Sensor data file not found at {filepath}. Returning empty list.\"\n        )\n        return []\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "IMAGE_TEXT_PAIRS_FILE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "IMAGE_TEXT_PAIRS_FILE = os.path.join(DATA_DIR, \"image_text_pairs.json\")\nDEFAULT_IMAGE_PATH = \"data/images/default_image.png\"\ndef load_sensor_data(filepath=SENSOR_FILE):\n    if not os.path.exists(filepath):\n        print(\n            f\"Warning: Sensor data file not found at {filepath}. Returning empty list.\"\n        )\n        return []\n    try:\n        with open(filepath, \"r\") as f:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DEFAULT_IMAGE_PATH",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DEFAULT_IMAGE_PATH = \"data/images/default_image.png\"\ndef load_sensor_data(filepath=SENSOR_FILE):\n    if not os.path.exists(filepath):\n        print(\n            f\"Warning: Sensor data file not found at {filepath}. Returning empty list.\"\n        )\n        return []\n    try:\n        with open(filepath, \"r\") as f:\n            data = json.load(f)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "OccipitalLobeAI",
        "kind": 6,
        "importPath": "occipital",
        "description": "occipital",
        "peekOfCode": "class OccipitalLobeAI:\n    def __init__(\n        self, model_path=\"data/occipital_model.weights.h5\"\n    ):  # Changed extension\n        self.input_shape = (64, 64, 3)  # Height, Width, Channels (color images)\n        self.output_size = 5  # Number of object labels/classes\n        self.model_path = model_path\n        self.model = self._build_model()\n        self.model.compile(\n            optimizer=\"adam\",",
        "detail": "occipital",
        "documentation": {}
    },
    {
        "label": "ParietalLobeAI",
        "kind": 6,
        "importPath": "parietal",
        "description": "parietal",
        "peekOfCode": "class ParietalLobeAI:\n    def __init__(self, model_path=\"data/parietal_model.weights.h5\"): # Updated extension\n        self.input_size = 20  # Sensory data (e.g., sensor readings)\n        self.output_size = 3  # Spatial coordinates (e.g., x, y, z) - regression target\n        # Learning rate for the Keras optimizer\n        self.learning_rate_learn = 0.001 # Standard Keras learning rate\n        # learning_rate_consolidate is not directly used unless model is recompiled or optimizer LR is changed.\n        # For simplicity, consolidation will use the same LR as initial training.\n        self.model_path = model_path\n        self.memory_path = self.model_path.replace(\".weights.h5\", \"_memory.json\") # Path for memory",
        "detail": "parietal",
        "documentation": {}
    },
    {
        "label": "TemporalLobeAI",
        "kind": 6,
        "importPath": "temporal",
        "description": "temporal",
        "peekOfCode": "class TemporalLobeAI:\n    def __init__(\n        self,\n        model_path=\"data/temporal_model.weights.h5\", # Updated extension\n        memory_path=\"data/temporal_memory.json\", # For cross-modal memory\n        tokenizer_path=\"data/temporal_tokenizer.json\"\n    ):\n        # RNN/LSTM Parameters\n        self.vocab_size = 2000  # Max words in vocabulary\n        self.max_sequence_length = 20  # Max length of text sequences",
        "detail": "temporal",
        "documentation": {}
    }
]